{"title": "Lyrics-Based Music Genre Classification Using a Hierarchical Attention\n  Network", "abstract": "Music genre classification, especially using lyrics alone, remains a\nchallenging topic in Music Information Retrieval. In this study we apply\nrecurrent neural network models to classify a large dataset of intact song\nlyrics. As lyrics exhibit a hierarchical layer structure - in which words\ncombine to form lines, lines form segments, and segments form a complete song -\nwe adapt a hierarchical attention network (HAN) to exploit these layers and in\naddition learn the importance of the words, lines, and segments. We test the\nmodel over a 117-genre dataset and a reduced 20-genre dataset. Experimental\nresults show that the HAN outperforms both non-neural models and simpler neural\nmodels, whilst also classifying over a higher number of genres than previous\nresearch. Through the learning process we can also visualise which words or\nlines in a song the model believes are important to classifying the genre. As a\nresult the HAN provides insights, from a computational perspective, into\nlyrical structure and language features that differentiate musical genres.", "published": "2017-07-15 02:22:41", "link": "http://arxiv.org/abs/1707.04678v1", "categories": ["cs.IR", "cs.CL", "cs.NE"], "primary_category": "cs.IR"}
{"title": "Memoisation: Purely, Left-recursively, and with (Continuation Passing)\n  Style", "abstract": "Memoisation, or tabling, is a well-known technique that yields large\nimprovements in the performance of some recursive computations. Tabled\nresolution in Prologs such as XSB and B-Prolog can transform so called\nleft-recursive predicates from non-terminating computations into finite and\nwell-behaved ones. In the functional programming literature, memoisation has\nusually been implemented in a way that does not handle left-recursion,\nrequiring supplementary mechanisms to prevent non-termination. A notable\nexception is Johnson's (1995) continuation passing approach in Scheme. This,\nhowever, relies on mutation of a memo table data structure and coding in\nexplicit continuation passing style. We show how Johnson's approach can be\nimplemented purely functionally in a modern, strongly typed functional language\n(OCaml), presented via a monadic interface that hides the implementation\ndetails, yet providing a way to return a compact represention of the memo\ntables at the end of the computation.", "published": "2017-07-15 11:03:49", "link": "http://arxiv.org/abs/1707.04724v1", "categories": ["cs.LO", "cs.CL", "cs.PL"], "primary_category": "cs.LO"}
