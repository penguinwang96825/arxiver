{"title": "A Comparative Study of Feature Selection Methods for Dialectal Arabic\n  Sentiment Classification Using Support Vector Machine", "abstract": "Unlike other languages, the Arabic language has a morphological complexity\nwhich makes the Arabic sentiment analysis is a challenging task. Moreover, the\npresence of the dialects in the Arabic texts have made the sentiment analysis\ntask is more challenging, due to the absence of specific rules that govern the\nwriting or speaking system. Generally, one of the problems of sentiment\nanalysis is the high dimensionality of the feature vector. To resolve this\nproblem, many feature selection methods have been proposed. In contrast to the\ndialectal Arabic language, these selection methods have been investigated\nwidely for the English language. This work investigated the effect of feature\nselection methods and their combinations on dialectal Arabic sentiment\nclassification. The feature selection methods are Information Gain (IG),\nCorrelation, Support Vector Machine (SVM), Gini Index (GI), and Chi-Square. A\nnumber of experiments were carried out on dialectical Jordanian reviews with\nusing an SVM classifier. Furthermore, the effect of different term weighting\nschemes, stemmers, stop words removal, and feature models on the performance\nwere investigated. The experimental results showed that the best performance of\nthe SVM classifier was obtained after the SVM and correlation feature selection\nmethods had been combined with the uni-gram model.", "published": "2019-02-17 10:51:15", "link": "http://arxiv.org/abs/1902.06242v1", "categories": ["cs.CL"], "primary_category": "cs.CL"}
{"title": "An Automated Testing Framework for Conversational Agents", "abstract": "Conversational agents are systems with a conversational interface that afford\ninteraction in spoken language. These systems are becoming prevalent and are\npreferred in various contexts and for many users. Despite their increasing\nsuccess, the automated testing infrastructure to support the effective and\nefficient development of such systems compared to traditional software systems\nis still limited. Automated testing framework for conversational systems can\nimprove the quality of these systems by assisting developers to write, execute,\nand maintain test cases. In this paper, we introduce our work-in-progress\nautomated testing framework, and its realization in the Python programming\nlanguage. We discuss some research problems in the development of such an\nautomated testing framework for conversational agents. In particular, we point\nout the problems of the specification of the expected behavior, known as test\noracles, and semantic comparison of utterances.", "published": "2019-02-17 03:17:03", "link": "http://arxiv.org/abs/1902.06193v1", "categories": ["cs.HC", "cs.CL"], "primary_category": "cs.HC"}
{"title": "Twitch Plays Pokemon, Machine Learns Twitch: Unsupervised Context-Aware\n  Anomaly Detection for Identifying Trolls in Streaming Data", "abstract": "With the increasing importance of online communities, discussion forums, and\ncustomer reviews, Internet \"trolls\" have proliferated thereby making it\ndifficult for information seekers to find relevant and correct information. In\nthis paper, we consider the problem of detecting and identifying Internet\ntrolls, almost all of which are human agents. Identifying a human agent among a\nhuman population presents significant challenges compared to detecting\nautomated spam or computerized robots. To learn a troll's behavior, we use\ncontextual anomaly detection to profile each chat user. Using clustering and\ndistance-based methods, we use contextual data such as the group's current\ngoal, the current time, and the username to classify each point as an anomaly.\nA user whose features significantly differ from the norm will be classified as\na troll. We collected 38 million data points from the viral Internet fad,\nTwitch Plays Pokemon. Using clustering and distance-based methods, we develop\nheuristics for identifying trolls. Using MapReduce techniques for preprocessing\nand user profiling, we are able to classify trolls based on 10 features\nextracted from a user's lifetime history.", "published": "2019-02-17 06:09:39", "link": "http://arxiv.org/abs/1902.06208v1", "categories": ["cs.CL", "cs.SI"], "primary_category": "cs.CL"}
